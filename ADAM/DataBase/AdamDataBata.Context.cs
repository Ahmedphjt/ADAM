//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ADAM.DataBase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ADAMConnectionString : DbContext
    {
        public ADAMConnectionString()
            : base("name=ADAMConnectionString")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountHelper> AccountHelpers { get; set; }
        public virtual DbSet<AreaData> AreaDatas { get; set; }
        public virtual DbSet<AuditDetail> AuditDetails { get; set; }
        public virtual DbSet<AuditHeader> AuditHeaders { get; set; }
        public virtual DbSet<BalanceSheet> BalanceSheets { get; set; }
        public virtual DbSet<BoxData> BoxDatas { get; set; }
        public virtual DbSet<CityData> CityDatas { get; set; }
        public virtual DbSet<ClientData> ClientDatas { get; set; }
        public virtual DbSet<CostCenter> CostCenters { get; set; }
        public virtual DbSet<CountryData> CountryDatas { get; set; }
        public virtual DbSet<CurrencyData> CurrencyDatas { get; set; }
        public virtual DbSet<DeliveryDataDetail> DeliveryDataDetails { get; set; }
        public virtual DbSet<DeliveryDataHeader> DeliveryDataHeaders { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DierctSellDetail> DierctSellDetails { get; set; }
        public virtual DbSet<DirectSellData> DirectSellDatas { get; set; }
        public virtual DbSet<division> divisions { get; set; }
        public virtual DbSet<DocumentDetail> DocumentDetails { get; set; }
        public virtual DbSet<DocumentHeader> DocumentHeaders { get; set; }
        public virtual DbSet<EmployeeData> EmployeeDatas { get; set; }
        public virtual DbSet<ExchangeRequestDetailsData> ExchangeRequestDetailsDatas { get; set; }
        public virtual DbSet<ExchangeRequestHeaderData> ExchangeRequestHeaderDatas { get; set; }
        public virtual DbSet<ExchangeRequestPricing> ExchangeRequestPricings { get; set; }
        public virtual DbSet<GovernorateData> GovernorateDatas { get; set; }
        public virtual DbSet<IncommingOrderData> IncommingOrderDatas { get; set; }
        public virtual DbSet<ItemColor> ItemColors { get; set; }
        public virtual DbSet<ItemColorSelected> ItemColorSelecteds { get; set; }
        public virtual DbSet<ItemContentDetail> ItemContentDetails { get; set; }
        public virtual DbSet<ItemContentHeader> ItemContentHeaders { get; set; }
        public virtual DbSet<ItemLocation> ItemLocations { get; set; }
        public virtual DbSet<ItemMovement> ItemMovements { get; set; }
        public virtual DbSet<ItemPrice> ItemPrices { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemsGroup> ItemsGroups { get; set; }
        public virtual DbSet<ItemStatus> ItemStatus { get; set; }
        public virtual DbSet<ItemType> ItemTypes { get; set; }
        public virtual DbSet<ItemTypeProdcutionLine> ItemTypeProdcutionLines { get; set; }
        public virtual DbSet<ItemUnit> ItemUnits { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JournalDetail> JournalDetails { get; set; }
        public virtual DbSet<JournalHeader> JournalHeaders { get; set; }
        public virtual DbSet<JournalType> JournalTypes { get; set; }
        public virtual DbSet<MasterAccountType> MasterAccountTypes { get; set; }
        public virtual DbSet<MovmentName> MovmentNames { get; set; }
        public virtual DbSet<Operation> Operations { get; set; }
        public virtual DbSet<PagesName> PagesNames { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PointOfSale> PointOfSales { get; set; }
        public virtual DbSet<ProductionDetailsOrder> ProductionDetailsOrders { get; set; }
        public virtual DbSet<ProductionHeaderOrder> ProductionHeaderOrders { get; set; }
        public virtual DbSet<ProductionLine> ProductionLines { get; set; }
        public virtual DbSet<ProfitAndLoss> ProfitAndLosses { get; set; }
        public virtual DbSet<PurchaseItemStatu> PurchaseItemStatus { get; set; }
        public virtual DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public virtual DbSet<PurchaseOredrDetail> PurchaseOredrDetails { get; set; }
        public virtual DbSet<QualificationsData> QualificationsDatas { get; set; }
        public virtual DbSet<RecordReceiptDetail> RecordReceiptDetails { get; set; }
        public virtual DbSet<RecordReceiptHeader> RecordReceiptHeaders { get; set; }
        public virtual DbSet<RefluxDetailsData> RefluxDetailsDatas { get; set; }
        public virtual DbSet<RefluxHeaderData> RefluxHeaderDatas { get; set; }
        public virtual DbSet<SexData> SexDatas { get; set; }
        public virtual DbSet<StoreData> StoreDatas { get; set; }
        public virtual DbSet<SupplierData> SupplierDatas { get; set; }
        public virtual DbSet<SupplierType> SupplierTypes { get; set; }
        public virtual DbSet<SupplyOrderDetail> SupplyOrderDetails { get; set; }
        public virtual DbSet<SupplyOrderHeader> SupplyOrderHeaders { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UserData> UserDatas { get; set; }
    
        public virtual ObjectResult<FollowUpPurchaseOrder_Result> FollowUpPurchaseOrder(Nullable<long> itemTypeId, Nullable<int> sex, Nullable<long> itemStatus, Nullable<long> productionLineId, Nullable<long> departmentId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(long));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(int));
    
            var itemStatusParameter = itemStatus.HasValue ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(long));
    
            var productionLineIdParameter = productionLineId.HasValue ?
                new ObjectParameter("ProductionLineId", productionLineId) :
                new ObjectParameter("ProductionLineId", typeof(long));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FollowUpPurchaseOrder_Result>("FollowUpPurchaseOrder", itemTypeIdParameter, sexParameter, itemStatusParameter, productionLineIdParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<GetAuditNo_Result> GetAuditNo(Nullable<long> recordReceiptNo, Nullable<long> auditNo)
        {
            var recordReceiptNoParameter = recordReceiptNo.HasValue ?
                new ObjectParameter("RecordReceiptNo", recordReceiptNo) :
                new ObjectParameter("RecordReceiptNo", typeof(long));
    
            var auditNoParameter = auditNo.HasValue ?
                new ObjectParameter("AuditNo", auditNo) :
                new ObjectParameter("AuditNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuditNo_Result>("GetAuditNo", recordReceiptNoParameter, auditNoParameter);
        }
    
        public virtual ObjectResult<GetIncommingOrder_Result> GetIncommingOrder(Nullable<long> recordReceiptNo, Nullable<long> auditNo, Nullable<long> incommingOrderNo)
        {
            var recordReceiptNoParameter = recordReceiptNo.HasValue ?
                new ObjectParameter("RecordReceiptNo", recordReceiptNo) :
                new ObjectParameter("RecordReceiptNo", typeof(long));
    
            var auditNoParameter = auditNo.HasValue ?
                new ObjectParameter("AuditNo", auditNo) :
                new ObjectParameter("AuditNo", typeof(long));
    
            var incommingOrderNoParameter = incommingOrderNo.HasValue ?
                new ObjectParameter("IncommingOrderNo", incommingOrderNo) :
                new ObjectParameter("IncommingOrderNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncommingOrder_Result>("GetIncommingOrder", recordReceiptNoParameter, auditNoParameter, incommingOrderNoParameter);
        }
    
        public virtual ObjectResult<GetProductionOrder_Result> GetProductionOrder(Nullable<long> productionNo)
        {
            var productionNoParameter = productionNo.HasValue ?
                new ObjectParameter("ProductionNo", productionNo) :
                new ObjectParameter("ProductionNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionOrder_Result>("GetProductionOrder", productionNoParameter);
        }
    
        public virtual ObjectResult<GetRecordReceiptNo_Result> GetRecordReceiptNo(Nullable<long> recordReceiptNo)
        {
            var recordReceiptNoParameter = recordReceiptNo.HasValue ?
                new ObjectParameter("RecordReceiptNo", recordReceiptNo) :
                new ObjectParameter("RecordReceiptNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecordReceiptNo_Result>("GetRecordReceiptNo", recordReceiptNoParameter);
        }
    
        public virtual ObjectResult<GetSupplyOrder_Result> GetSupplyOrder(Nullable<long> supplyOrderNo)
        {
            var supplyOrderNoParameter = supplyOrderNo.HasValue ?
                new ObjectParameter("SupplyOrderNo", supplyOrderNo) :
                new ObjectParameter("SupplyOrderNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplyOrder_Result>("GetSupplyOrder", supplyOrderNoParameter);
        }
    
        public virtual ObjectResult<rptAcceptedDeliveryOrder_Result> rptAcceptedDeliveryOrder(Nullable<long> deliveryNo)
        {
            var deliveryNoParameter = deliveryNo.HasValue ?
                new ObjectParameter("DeliveryNo", deliveryNo) :
                new ObjectParameter("DeliveryNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptAcceptedDeliveryOrder_Result>("rptAcceptedDeliveryOrder", deliveryNoParameter);
        }
    
        public virtual ObjectResult<rptAccount_Result> rptAccount(Nullable<int> accountType, Nullable<int> mezania3momia, Nullable<int> reb7and5sara)
        {
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var mezania3momiaParameter = mezania3momia.HasValue ?
                new ObjectParameter("Mezania3momia", mezania3momia) :
                new ObjectParameter("Mezania3momia", typeof(int));
    
            var reb7and5saraParameter = reb7and5sara.HasValue ?
                new ObjectParameter("Reb7and5sara", reb7and5sara) :
                new ObjectParameter("Reb7and5sara", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptAccount_Result>("rptAccount", accountTypeParameter, mezania3momiaParameter, reb7and5saraParameter);
        }
    
        public virtual ObjectResult<rptAccountStatement_Result> rptAccountStatement(Nullable<long> accountId, Nullable<System.DateTime> beginJournalDate, Nullable<System.DateTime> endJournalDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(long));
    
            var beginJournalDateParameter = beginJournalDate.HasValue ?
                new ObjectParameter("BeginJournalDate", beginJournalDate) :
                new ObjectParameter("BeginJournalDate", typeof(System.DateTime));
    
            var endJournalDateParameter = endJournalDate.HasValue ?
                new ObjectParameter("EndJournalDate", endJournalDate) :
                new ObjectParameter("EndJournalDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptAccountStatement_Result>("rptAccountStatement", accountIdParameter, beginJournalDateParameter, endJournalDateParameter);
        }
    
        public virtual ObjectResult<rptBalanceSheet_Result> rptBalanceSheet(Nullable<int> accountLevel)
        {
            var accountLevelParameter = accountLevel.HasValue ?
                new ObjectParameter("AccountLevel", accountLevel) :
                new ObjectParameter("AccountLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptBalanceSheet_Result>("rptBalanceSheet", accountLevelParameter);
        }
    
        public virtual ObjectResult<rptBoxData_Result> rptBoxData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptBoxData_Result>("rptBoxData");
        }
    
        public virtual ObjectResult<rptClientFollowUp_Result> rptClientFollowUp(Nullable<long> clientDataId, Nullable<System.DateTime> fExchangeRequestDate, Nullable<System.DateTime> eExchangeRequestDate)
        {
            var clientDataIdParameter = clientDataId.HasValue ?
                new ObjectParameter("ClientDataId", clientDataId) :
                new ObjectParameter("ClientDataId", typeof(long));
    
            var fExchangeRequestDateParameter = fExchangeRequestDate.HasValue ?
                new ObjectParameter("FExchangeRequestDate", fExchangeRequestDate) :
                new ObjectParameter("FExchangeRequestDate", typeof(System.DateTime));
    
            var eExchangeRequestDateParameter = eExchangeRequestDate.HasValue ?
                new ObjectParameter("EExchangeRequestDate", eExchangeRequestDate) :
                new ObjectParameter("EExchangeRequestDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptClientFollowUp_Result>("rptClientFollowUp", clientDataIdParameter, fExchangeRequestDateParameter, eExchangeRequestDateParameter);
        }
    
        public virtual ObjectResult<rptContentReport_Result> rptContentReport(Nullable<long> itemContentHeaderId)
        {
            var itemContentHeaderIdParameter = itemContentHeaderId.HasValue ?
                new ObjectParameter("ItemContentHeaderId", itemContentHeaderId) :
                new ObjectParameter("ItemContentHeaderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptContentReport_Result>("rptContentReport", itemContentHeaderIdParameter);
        }
    
        public virtual ObjectResult<rptCostCenter_Result> rptCostCenter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptCostCenter_Result>("rptCostCenter");
        }
    
        public virtual ObjectResult<rptCurrencyData_Result> rptCurrencyData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptCurrencyData_Result>("rptCurrencyData");
        }
    
        public virtual ObjectResult<rptDeliveryOrder_Result> rptDeliveryOrder(Nullable<long> deliveryNo)
        {
            var deliveryNoParameter = deliveryNo.HasValue ?
                new ObjectParameter("DeliveryNo", deliveryNo) :
                new ObjectParameter("DeliveryNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptDeliveryOrder_Result>("rptDeliveryOrder", deliveryNoParameter);
        }
    
        public virtual ObjectResult<rptDierctSellOreder_Result> rptDierctSellOreder(Nullable<long> directSellNo)
        {
            var directSellNoParameter = directSellNo.HasValue ?
                new ObjectParameter("DirectSellNo", directSellNo) :
                new ObjectParameter("DirectSellNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptDierctSellOreder_Result>("rptDierctSellOreder", directSellNoParameter);
        }
    
        public virtual ObjectResult<rptDocument_Result> rptDocument(Nullable<long> documentHeaderId, Nullable<int> docType)
        {
            var documentHeaderIdParameter = documentHeaderId.HasValue ?
                new ObjectParameter("DocumentHeaderId", documentHeaderId) :
                new ObjectParameter("DocumentHeaderId", typeof(long));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptDocument_Result>("rptDocument", documentHeaderIdParameter, docTypeParameter);
        }
    
        public virtual ObjectResult<rptExchangePrice_Result> rptExchangePrice(Nullable<long> exchangeRequestNo, Nullable<int> orderType)
        {
            var exchangeRequestNoParameter = exchangeRequestNo.HasValue ?
                new ObjectParameter("ExchangeRequestNo", exchangeRequestNo) :
                new ObjectParameter("ExchangeRequestNo", typeof(long));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptExchangePrice_Result>("rptExchangePrice", exchangeRequestNoParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<rptExchangeRequestOrderReport_Result> rptExchangeRequestOrderReport(Nullable<long> exchangeRequestNo, Nullable<long> orderType)
        {
            var exchangeRequestNoParameter = exchangeRequestNo.HasValue ?
                new ObjectParameter("ExchangeRequestNo", exchangeRequestNo) :
                new ObjectParameter("ExchangeRequestNo", typeof(long));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptExchangeRequestOrderReport_Result>("rptExchangeRequestOrderReport", exchangeRequestNoParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<rptExchangeRequestReport_Result> rptExchangeRequestReport(Nullable<long> exchangeRequestNo, Nullable<long> orderType)
        {
            var exchangeRequestNoParameter = exchangeRequestNo.HasValue ?
                new ObjectParameter("ExchangeRequestNo", exchangeRequestNo) :
                new ObjectParameter("ExchangeRequestNo", typeof(long));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptExchangeRequestReport_Result>("rptExchangeRequestReport", exchangeRequestNoParameter, orderTypeParameter);
        }
    
        public virtual ObjectResult<rptFirstJournalBalance_Result> rptFirstJournalBalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptFirstJournalBalance_Result>("rptFirstJournalBalance");
        }
    
        public virtual ObjectResult<rptFirstTimeBalance_Result> rptFirstTimeBalance(Nullable<long> itemTypeId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptFirstTimeBalance_Result>("rptFirstTimeBalance", itemTypeIdParameter);
        }
    
        public virtual ObjectResult<rptGetArea_Result> rptGetArea(Nullable<long> countryId, Nullable<long> cityId, Nullable<long> governorateId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var governorateIdParameter = governorateId.HasValue ?
                new ObjectParameter("GovernorateId", governorateId) :
                new ObjectParameter("GovernorateId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetArea_Result>("rptGetArea", countryIdParameter, cityIdParameter, governorateIdParameter);
        }
    
        public virtual ObjectResult<rptGetCity_Result> rptGetCity(Nullable<long> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetCity_Result>("rptGetCity", countryIdParameter);
        }
    
        public virtual ObjectResult<rptGetClient_Result> rptGetClient(Nullable<long> code, Nullable<int> sex, Nullable<long> jobId, string idNo, Nullable<long> countryId, Nullable<long> cityId, string firstName, string lastName, Nullable<long> employeeId)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(long));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetClient_Result>("rptGetClient", codeParameter, sexParameter, jobIdParameter, idNoParameter, countryIdParameter, cityIdParameter, firstNameParameter, lastNameParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<rptGetCountry_Result> rptGetCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetCountry_Result>("rptGetCountry");
        }
    
        public virtual ObjectResult<rptGetDepartment_Result> rptGetDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetDepartment_Result>("rptGetDepartment");
        }
    
        public virtual ObjectResult<rptGetDevision_Result> rptGetDevision(Nullable<long> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetDevision_Result>("rptGetDevision", departmentIdParameter);
        }
    
        public virtual ObjectResult<rptGetEmployee_Result> rptGetEmployee(Nullable<long> code, Nullable<int> sex, Nullable<long> jobId, string idNo, Nullable<long> countryId, Nullable<long> cityId, string firstName, string lastName, Nullable<long> departmentId, Nullable<long> divisionId, Nullable<long> qualificationId)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(long));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(long));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(long));
    
            var qualificationIdParameter = qualificationId.HasValue ?
                new ObjectParameter("QualificationId", qualificationId) :
                new ObjectParameter("QualificationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetEmployee_Result>("rptGetEmployee", codeParameter, sexParameter, jobIdParameter, idNoParameter, countryIdParameter, cityIdParameter, firstNameParameter, lastNameParameter, departmentIdParameter, divisionIdParameter, qualificationIdParameter);
        }
    
        public virtual ObjectResult<rptGetGovernorate_Result> rptGetGovernorate(Nullable<long> countryId, Nullable<long> cityId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetGovernorate_Result>("rptGetGovernorate", countryIdParameter, cityIdParameter);
        }
    
        public virtual ObjectResult<rptGetItem_Result> rptGetItem(Nullable<long> itemTypeId, Nullable<int> sex, Nullable<int> itemStatus, Nullable<long> itemId, Nullable<long> itemCode)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(long));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(int));
    
            var itemStatusParameter = itemStatus.HasValue ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var itemCodeParameter = itemCode.HasValue ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetItem_Result>("rptGetItem", itemTypeIdParameter, sexParameter, itemStatusParameter, itemIdParameter, itemCodeParameter);
        }
    
        public virtual ObjectResult<rptGetItemColor_Result> rptGetItemColor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetItemColor_Result>("rptGetItemColor");
        }
    
        public virtual ObjectResult<rptGetItemType_Result> rptGetItemType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetItemType_Result>("rptGetItemType");
        }
    
        public virtual ObjectResult<rptGetItemUnit_Result> rptGetItemUnit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetItemUnit_Result>("rptGetItemUnit");
        }
    
        public virtual ObjectResult<rptGetJobs_Result> rptGetJobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetJobs_Result>("rptGetJobs");
        }
    
        public virtual ObjectResult<rptGetPermission_Result> rptGetPermission(Nullable<long> empId, Nullable<long> operationsId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var operationsIdParameter = operationsId.HasValue ?
                new ObjectParameter("OperationsId", operationsId) :
                new ObjectParameter("OperationsId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetPermission_Result>("rptGetPermission", empIdParameter, operationsIdParameter);
        }
    
        public virtual ObjectResult<rptGetPointOfSale_Result> rptGetPointOfSale()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetPointOfSale_Result>("rptGetPointOfSale");
        }
    
        public virtual ObjectResult<rptGetProductionLine_Result> rptGetProductionLine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetProductionLine_Result>("rptGetProductionLine");
        }
    
        public virtual ObjectResult<rptGetPurchaseOrderData_Result> rptGetPurchaseOrderData(Nullable<long> purchaseOrderNo, Nullable<long> departmentID, Nullable<long> divisionID, Nullable<int> status, Nullable<int> sStatus)
        {
            var purchaseOrderNoParameter = purchaseOrderNo.HasValue ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(long));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(long));
    
            var divisionIDParameter = divisionID.HasValue ?
                new ObjectParameter("DivisionID", divisionID) :
                new ObjectParameter("DivisionID", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var sStatusParameter = sStatus.HasValue ?
                new ObjectParameter("SStatus", sStatus) :
                new ObjectParameter("SStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetPurchaseOrderData_Result>("rptGetPurchaseOrderData", purchaseOrderNoParameter, departmentIDParameter, divisionIDParameter, statusParameter, sStatusParameter);
        }
    
        public virtual ObjectResult<rptGetQualifications_Result> rptGetQualifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetQualifications_Result>("rptGetQualifications");
        }
    
        public virtual ObjectResult<rptGetStores_Result> rptGetStores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetStores_Result>("rptGetStores");
        }
    
        public virtual ObjectResult<rptGetSupplier_Result> rptGetSupplier(Nullable<long> code, Nullable<int> sex, Nullable<long> jobId, string idNo, Nullable<long> countryId, Nullable<long> cityId, string firstName, string lastName)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(long));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(long));
    
            var idNoParameter = idNo != null ?
                new ObjectParameter("IdNo", idNo) :
                new ObjectParameter("IdNo", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(long));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetSupplier_Result>("rptGetSupplier", codeParameter, sexParameter, jobIdParameter, idNoParameter, countryIdParameter, cityIdParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<rptGetSupplierType_Result> rptGetSupplierType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetSupplierType_Result>("rptGetSupplierType");
        }
    
        public virtual ObjectResult<rptGetUsers_Result> rptGetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetUsers_Result>("rptGetUsers");
        }
    
        public virtual ObjectResult<rptGroupItemBalance_Result> rptGroupItemBalance(Nullable<long> itemTpeId, Nullable<long> productionLineId, Nullable<long> groupItemId)
        {
            var itemTpeIdParameter = itemTpeId.HasValue ?
                new ObjectParameter("ItemTpeId", itemTpeId) :
                new ObjectParameter("ItemTpeId", typeof(long));
    
            var productionLineIdParameter = productionLineId.HasValue ?
                new ObjectParameter("ProductionLineId", productionLineId) :
                new ObjectParameter("ProductionLineId", typeof(long));
    
            var groupItemIdParameter = groupItemId.HasValue ?
                new ObjectParameter("GroupItemId", groupItemId) :
                new ObjectParameter("GroupItemId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGroupItemBalance_Result>("rptGroupItemBalance", itemTpeIdParameter, productionLineIdParameter, groupItemIdParameter);
        }
    
        public virtual ObjectResult<rptItemBinCard_Result> rptItemBinCard(Nullable<long> itemId, Nullable<long> itemColorId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var itemColorIdParameter = itemColorId.HasValue ?
                new ObjectParameter("ItemColorId", itemColorId) :
                new ObjectParameter("ItemColorId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptItemBinCard_Result>("rptItemBinCard", itemIdParameter, itemColorIdParameter);
        }
    
        public virtual ObjectResult<rptItemFollowUp_Result> rptItemFollowUp(Nullable<long> itemId, Nullable<System.DateTime> fMovementDate, Nullable<System.DateTime> eMovementDate, Nullable<long> productionLineId, Nullable<long> itemTypeId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var fMovementDateParameter = fMovementDate.HasValue ?
                new ObjectParameter("FMovementDate", fMovementDate) :
                new ObjectParameter("FMovementDate", typeof(System.DateTime));
    
            var eMovementDateParameter = eMovementDate.HasValue ?
                new ObjectParameter("EMovementDate", eMovementDate) :
                new ObjectParameter("EMovementDate", typeof(System.DateTime));
    
            var productionLineIdParameter = productionLineId.HasValue ?
                new ObjectParameter("ProductionLineId", productionLineId) :
                new ObjectParameter("ProductionLineId", typeof(long));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptItemFollowUp_Result>("rptItemFollowUp", itemIdParameter, fMovementDateParameter, eMovementDateParameter, productionLineIdParameter, itemTypeIdParameter);
        }
    
        public virtual ObjectResult<rptItemGroups_Result> rptItemGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptItemGroups_Result>("rptItemGroups");
        }
    
        public virtual ObjectResult<rptItemLocation_Result> rptItemLocation(Nullable<long> itemTypeId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptItemLocation_Result>("rptItemLocation", itemTypeIdParameter);
        }
    
        public virtual ObjectResult<rptJournal_Result> rptJournal(Nullable<long> journalId, Nullable<int> journalType)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(long));
    
            var journalTypeParameter = journalType.HasValue ?
                new ObjectParameter("JournalType", journalType) :
                new ObjectParameter("JournalType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptJournal_Result>("rptJournal", journalIdParameter, journalTypeParameter);
        }
    
        public virtual ObjectResult<rptMezanElMorag3a_Result> rptMezanElMorag3a(Nullable<System.DateTime> firstDate, Nullable<System.DateTime> lastDate)
        {
            var firstDateParameter = firstDate.HasValue ?
                new ObjectParameter("FirstDate", firstDate) :
                new ObjectParameter("FirstDate", typeof(System.DateTime));
    
            var lastDateParameter = lastDate.HasValue ?
                new ObjectParameter("LastDate", lastDate) :
                new ObjectParameter("LastDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptMezanElMorag3a_Result>("rptMezanElMorag3a", firstDateParameter, lastDateParameter);
        }
    
        public virtual ObjectResult<rptPointForEmployee_Result> rptPointForEmployee(Nullable<long> empId, Nullable<System.DateTime> beforeExchangeRequestDate, Nullable<System.DateTime> afterExchangeRequestDate)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var beforeExchangeRequestDateParameter = beforeExchangeRequestDate.HasValue ?
                new ObjectParameter("BeforeExchangeRequestDate", beforeExchangeRequestDate) :
                new ObjectParameter("BeforeExchangeRequestDate", typeof(System.DateTime));
    
            var afterExchangeRequestDateParameter = afterExchangeRequestDate.HasValue ?
                new ObjectParameter("AfterExchangeRequestDate", afterExchangeRequestDate) :
                new ObjectParameter("AfterExchangeRequestDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptPointForEmployee_Result>("rptPointForEmployee", empIdParameter, beforeExchangeRequestDateParameter, afterExchangeRequestDateParameter);
        }
    
        public virtual ObjectResult<rptProductionLineItems_Result> rptProductionLineItems(Nullable<long> itemId, Nullable<long> productionLineId, Nullable<long> itemTypeId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(long));
    
            var productionLineIdParameter = productionLineId.HasValue ?
                new ObjectParameter("ProductionLineId", productionLineId) :
                new ObjectParameter("ProductionLineId", typeof(long));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptProductionLineItems_Result>("rptProductionLineItems", itemIdParameter, productionLineIdParameter, itemTypeIdParameter);
        }
    
        public virtual ObjectResult<rptProfitAndLoss_Result> rptProfitAndLoss(Nullable<int> accountLevel)
        {
            var accountLevelParameter = accountLevel.HasValue ?
                new ObjectParameter("AccountLevel", accountLevel) :
                new ObjectParameter("AccountLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptProfitAndLoss_Result>("rptProfitAndLoss", accountLevelParameter);
        }
    
        public virtual ObjectResult<rptPurchaseOrderFollowUp_Result> rptPurchaseOrderFollowUp(Nullable<long> supplierDataId, Nullable<System.DateTime> fPurchaseDate, Nullable<System.DateTime> ePurchaseDate)
        {
            var supplierDataIdParameter = supplierDataId.HasValue ?
                new ObjectParameter("SupplierDataId", supplierDataId) :
                new ObjectParameter("SupplierDataId", typeof(long));
    
            var fPurchaseDateParameter = fPurchaseDate.HasValue ?
                new ObjectParameter("FPurchaseDate", fPurchaseDate) :
                new ObjectParameter("FPurchaseDate", typeof(System.DateTime));
    
            var ePurchaseDateParameter = ePurchaseDate.HasValue ?
                new ObjectParameter("EPurchaseDate", ePurchaseDate) :
                new ObjectParameter("EPurchaseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptPurchaseOrderFollowUp_Result>("rptPurchaseOrderFollowUp", supplierDataIdParameter, fPurchaseDateParameter, ePurchaseDateParameter);
        }
    
        public virtual ObjectResult<rptRefluxHeaderData_Result> rptRefluxHeaderData(Nullable<long> refluxNo, Nullable<long> itemTypeId)
        {
            var refluxNoParameter = refluxNo.HasValue ?
                new ObjectParameter("RefluxNo", refluxNo) :
                new ObjectParameter("RefluxNo", typeof(long));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptRefluxHeaderData_Result>("rptRefluxHeaderData", refluxNoParameter, itemTypeIdParameter);
        }
    
        public virtual ObjectResult<rptStoreBalance_Result> rptStoreBalance(Nullable<long> itemTpeId, Nullable<long> productionLineId)
        {
            var itemTpeIdParameter = itemTpeId.HasValue ?
                new ObjectParameter("ItemTpeId", itemTpeId) :
                new ObjectParameter("ItemTpeId", typeof(long));
    
            var productionLineIdParameter = productionLineId.HasValue ?
                new ObjectParameter("ProductionLineId", productionLineId) :
                new ObjectParameter("ProductionLineId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptStoreBalance_Result>("rptStoreBalance", itemTpeIdParameter, productionLineIdParameter);
        }
    
        public virtual ObjectResult<rptStoreCheck_Result> rptStoreCheck(Nullable<long> itemTpeId, Nullable<long> productionLineId)
        {
            var itemTpeIdParameter = itemTpeId.HasValue ?
                new ObjectParameter("ItemTpeId", itemTpeId) :
                new ObjectParameter("ItemTpeId", typeof(long));
    
            var productionLineIdParameter = productionLineId.HasValue ?
                new ObjectParameter("ProductionLineId", productionLineId) :
                new ObjectParameter("ProductionLineId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptStoreCheck_Result>("rptStoreCheck", itemTpeIdParameter, productionLineIdParameter);
        }
    
        public virtual ObjectResult<rptUnPostedJournal_Result> rptUnPostedJournal(Nullable<long> journalId, Nullable<int> journalType)
        {
            var journalIdParameter = journalId.HasValue ?
                new ObjectParameter("JournalId", journalId) :
                new ObjectParameter("JournalId", typeof(long));
    
            var journalTypeParameter = journalType.HasValue ?
                new ObjectParameter("JournalType", journalType) :
                new ObjectParameter("JournalType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptUnPostedJournal_Result>("rptUnPostedJournal", journalIdParameter, journalTypeParameter);
        }
    }
}
